--------------------------------------------------------
--  File created - Tuesday-May-30-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence ADDRESS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."ADDRESS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ADDRESS_STATUS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."ADDRESS_STATUS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUTHERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."AUTHERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence BOOKS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."BOOKS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence BOOK_LANGUAGES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."BOOK_LANGUAGES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence COUNTRY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."COUNTRY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence CUSTMERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."CUSTMERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence CUST_ORDER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."CUST_ORDER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ORDER_HISTORY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."ORDER_HISTORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ORDER_LINE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."ORDER_LINE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence ORDER_STATUS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."ORDER_STATUS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence PUBLISHERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."PUBLISHERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SHIPPING_METHOD_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "BOOKSTORE"."SHIPPING_METHOD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table ADDRESS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."ADDRESS" 
   (	"ADDRESS_ID" NUMBER DEFAULT "BOOKSTORE"."ADDRESS_SEQ"."NEXTVAL", 
	"STREET_NUMBER" VARCHAR2(100 BYTE), 
	"STREET_NAME" VARCHAR2(100 BYTE), 
	"CITY" VARCHAR2(100 BYTE), 
	"COUNTRY_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ADDRESS_STATUS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."ADDRESS_STATUS" 
   (	"STATUS_ID" NUMBER DEFAULT "BOOKSTORE"."ADDRESS_STATUS_SEQ"."NEXTVAL", 
	"ADDRESS_STATUS" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUTHERS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."AUTHERS" 
   (	"AUTHER_ID" NUMBER DEFAULT "BOOKSTORE"."AUTHERS_SEQ"."NEXTVAL", 
	"AUTHER_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOKS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."BOOKS" 
   (	"BOOK_ID" NUMBER DEFAULT "BOOKSTORE"."BOOKS_SEQ"."NEXTVAL", 
	"TITLE" VARCHAR2(100 BYTE) DEFAULT NULL, 
	"ISBN13" VARCHAR2(100 BYTE), 
	"LANGUAGE_ID" NUMBER, 
	"NUM_PAGES" NUMBER, 
	"PUBLICATION_DATE" DATE DEFAULT sysdate, 
	"PUBLISHER_ID" NUMBER, 
	"IMAGE" BLOB, 
	"PRICE" NUMBER, 
	"PATH" VARCHAR2(500 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("IMAGE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table BOOK_AUTHER
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."BOOK_AUTHER" 
   (	"BOOK_ID" NUMBER, 
	"AUTHER_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOK_LANGUAGES
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."BOOK_LANGUAGES" 
   (	"LANGUAGE_ID" NUMBER DEFAULT "BOOKSTORE"."BOOK_LANGUAGES_SEQ"."NEXTVAL", 
	"LANGUAGE_CODE" VARCHAR2(50 BYTE), 
	"LANGUAGE_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COUNTRY
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."COUNTRY" 
   (	"COUNTRY_ID" NUMBER DEFAULT "BOOKSTORE"."COUNTRY_SEQ"."NEXTVAL", 
	"COUNTRY_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUSTMERS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."CUSTMERS" 
   (	"CUSTMER_ID" NUMBER DEFAULT "BOOKSTORE"."CUSTMERS_SEQ"."NEXTVAL", 
	"FIRST_NAME" VARCHAR2(20 BYTE), 
	"LAST_NAME" VARCHAR2(20 BYTE), 
	"EMAIL" VARCHAR2(30 BYTE), 
	"PASSWORD" VARCHAR2(50 BYTE), 
	"ADMIN" NUMBER(1,0) DEFAULT 0, 
	"IMAGE" BLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("IMAGE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table CUSTMER_ADDRESS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."CUSTMER_ADDRESS" 
   (	"CUSTMER_ID" NUMBER, 
	"ADDRESS_ID" NUMBER, 
	"STATUS_ID" NUMBER DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUST_ORDER
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."CUST_ORDER" 
   (	"ORDER_ID" NUMBER DEFAULT "BOOKSTORE"."CUST_ORDER_SEQ"."NEXTVAL", 
	"ORDER_DATE" DATE DEFAULT sysdate, 
	"CUSTOMER_ID" NUMBER, 
	"SHIPPING_METHOD_ID" NUMBER, 
	"DEST_ADDRESS_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDER_HISTORY
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."ORDER_HISTORY" 
   (	"HISTORY_ID" NUMBER DEFAULT "BOOKSTORE"."ORDER_HISTORY_SEQ"."NEXTVAL", 
	"ORDER_ID" NUMBER, 
	"STATUS_ID" NUMBER, 
	"STATUS_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDER_LINE
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."ORDER_LINE" 
   (	"LINE_ID" NUMBER DEFAULT "BOOKSTORE"."ORDER_LINE_SEQ"."NEXTVAL", 
	"ORDER_ID" NUMBER, 
	"BOOK_ID" NUMBER, 
	"PRICE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDER_STATUS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."ORDER_STATUS" 
   (	"STATUS_ID" NUMBER DEFAULT "BOOKSTORE"."ORDER_STATUS_SEQ"."NEXTVAL", 
	"STATUS_VALUE" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PUBLISHERS
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."PUBLISHERS" 
   (	"PUBLISHER_ID" NUMBER DEFAULT "BOOKSTORE"."PUBLISHERS_SEQ"."NEXTVAL", 
	"PUBLISHER_NAME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SHIPPING_METHOD
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."SHIPPING_METHOD" 
   (	"METHOD_ID" NUMBER DEFAULT "BOOKSTORE"."SHIPPING_METHOD_SEQ"."NEXTVAL", 
	"METHOD_NAME" VARCHAR2(20 BYTE), 
	"COST" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table VERIFY_EMAIL_TB
--------------------------------------------------------

  CREATE TABLE "BOOKSTORE"."VERIFY_EMAIL_TB" 
   (	"EMAIL" VARCHAR2(50 BYTE), 
	"CODE" VARCHAR2(50 BYTE), 
	"DATE_HOURE" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into BOOKSTORE.ADDRESS
SET DEFINE OFF;
Insert into BOOKSTORE.ADDRESS (ADDRESS_ID,STREET_NUMBER,STREET_NAME,CITY,COUNTRY_ID) values (21,null,'??? ?????? ?? ???????','??? ????',1);
Insert into BOOKSTORE.ADDRESS (ADDRESS_ID,STREET_NUMBER,STREET_NAME,CITY,COUNTRY_ID) values (22,null,'???? ???????','???????',22);
Insert into BOOKSTORE.ADDRESS (ADDRESS_ID,STREET_NUMBER,STREET_NAME,CITY,COUNTRY_ID) values (1,'1','????????','???',1);
REM INSERTING into BOOKSTORE.ADDRESS_STATUS
SET DEFINE OFF;
Insert into BOOKSTORE.ADDRESS_STATUS (STATUS_ID,ADDRESS_STATUS) values (1,'????');
REM INSERTING into BOOKSTORE.AUTHERS
SET DEFINE OFF;
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (0,' ');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (61,'Harper Lee');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (62,'Jane Austen');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (63,'Gabriel Garc?a M?rquez');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (64,'Herman Melville');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (65,'F. Scott Fitzgerald');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (66,'J.D. Salinger');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (67,'Paulo Coelho');
Insert into BOOKSTORE.AUTHERS (AUTHER_ID,AUTHER_NAME) values (68,'Ernest Hemingway');
REM INSERTING into BOOKSTORE.BOOKS
SET DEFINE OFF;
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (103,'To Kill a Mockingbird',null,24,281,to_date('10-01-2023','DD-MM-YYYY'),61,9.99,'pictures/1672811555-To Kill a Mockingbird.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (104,'Pride and Prejudice',null,24,232,to_date('26-01-2023','DD-MM-YYYY'),62,9.66,'pictures/1672811607-Pride and Prejudice.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (105,'One Hundred Years of Solitude',null,25,417,to_date('24-01-2023','DD-MM-YYYY'),63,11.99,'pictures/1672811650-One Hundred Years of Solitude.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (106,'Moby-Dick',null,24,635,to_date('10-01-2023','DD-MM-YYYY'),61,8.99,'pictures/1672811700-Moby-Dick.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (107,'The Great Gatsby',null,61,180,to_date('23-01-2023','DD-MM-YYYY'),62,10.99,'pictures/1672811749-The Great Gatsby.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (108,'The Catcher in the Rye',null,2,277,to_date('29-01-2023','DD-MM-YYYY'),62,12.99,'pictures/1672811791-The Catcher in the Rye.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (109,'The Alchemist',null,62,208,to_date('03-01-2023','DD-MM-YYYY'),63,14.99,'pictures/1672811864-Alchemist.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (110,'The Old Man and the Sea',null,24,128,to_date('12-01-2023','DD-MM-YYYY'),61,8.99,'pictures/1672811913-The Old Man and the Sea.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (111,'??????? ???????',null,2,444,to_date('13-01-2023','DD-MM-YYYY'),62,33,'pictures/1672813319-download.jpg');
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (122,null,null,null,null,null,null,null,null);
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (123,null,null,null,null,null,null,null,null);
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (124,null,null,null,null,null,null,null,null);
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (126,null,null,null,null,null,null,null,null);
Insert into BOOKSTORE.BOOKS (BOOK_ID,TITLE,ISBN13,LANGUAGE_ID,NUM_PAGES,PUBLICATION_DATE,PUBLISHER_ID,PRICE,PATH) values (127,'saffafsas',null,null,null,null,null,null,null);
REM INSERTING into BOOKSTORE.BOOK_AUTHER
SET DEFINE OFF;
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (103,61);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (104,61);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (105,62);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (106,63);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (107,61);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (108,65);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (109,62);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (110,64);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (111,61);
Insert into BOOKSTORE.BOOK_AUTHER (BOOK_ID,AUTHER_ID) values (127,61);
REM INSERTING into BOOKSTORE.BOOK_LANGUAGES
SET DEFINE OFF;
Insert into BOOKSTORE.BOOK_LANGUAGES (LANGUAGE_ID,LANGUAGE_CODE,LANGUAGE_NAME) values (24,null,'????? ??????????');
Insert into BOOKSTORE.BOOK_LANGUAGES (LANGUAGE_ID,LANGUAGE_CODE,LANGUAGE_NAME) values (25,null,'????????');
Insert into BOOKSTORE.BOOK_LANGUAGES (LANGUAGE_ID,LANGUAGE_CODE,LANGUAGE_NAME) values (0,null,' ');
Insert into BOOKSTORE.BOOK_LANGUAGES (LANGUAGE_ID,LANGUAGE_CODE,LANGUAGE_NAME) values (2,null,'????? ???????');
Insert into BOOKSTORE.BOOK_LANGUAGES (LANGUAGE_ID,LANGUAGE_CODE,LANGUAGE_NAME) values (61,null,'??????????');
Insert into BOOKSTORE.BOOK_LANGUAGES (LANGUAGE_ID,LANGUAGE_CODE,LANGUAGE_NAME) values (62,null,'?????????');
REM INSERTING into BOOKSTORE.COUNTRY
SET DEFINE OFF;
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (41,'?????');
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (42,'?????');
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (43,'?????');
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (44,'??????');
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (45,'??????? ??????? ????????');
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (46,'???????? ??????? ???????');
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (1,'??????');
Insert into BOOKSTORE.COUNTRY (COUNTRY_ID,COUNTRY_NAME) values (22,'???');
REM INSERTING into BOOKSTORE.CUSTMERS
SET DEFINE OFF;
Insert into BOOKSTORE.CUSTMERS (CUSTMER_ID,FIRST_NAME,LAST_NAME,EMAIL,PASSWORD,ADMIN) values (21,'sda','sd','asd','asd',0);
Insert into BOOKSTORE.CUSTMERS (CUSTMER_ID,FIRST_NAME,LAST_NAME,EMAIL,PASSWORD,ADMIN) values (1,'????','??????','ahmed@ahmed.com','123456',1);
Insert into BOOKSTORE.CUSTMERS (CUSTMER_ID,FIRST_NAME,LAST_NAME,EMAIL,PASSWORD,ADMIN) values (2,'???? ????','??????','user@user.com','asd',0);
Insert into BOOKSTORE.CUSTMERS (CUSTMER_ID,FIRST_NAME,LAST_NAME,EMAIL,PASSWORD,ADMIN) values (41,'asdasd','asdsd','zaheiyad02@gmail.com','??',0);
Insert into BOOKSTORE.CUSTMERS (CUSTMER_ID,FIRST_NAME,LAST_NAME,EMAIL,PASSWORD,ADMIN) values (42,'Ahmed','Alhopi','ahmedalhopi2@gmail.com','asd',0);
REM INSERTING into BOOKSTORE.CUSTMER_ADDRESS
SET DEFINE OFF;
Insert into BOOKSTORE.CUSTMER_ADDRESS (CUSTMER_ID,ADDRESS_ID,STATUS_ID) values (2,22,1);
Insert into BOOKSTORE.CUSTMER_ADDRESS (CUSTMER_ID,ADDRESS_ID,STATUS_ID) values (2,21,1);
REM INSERTING into BOOKSTORE.CUST_ORDER
SET DEFINE OFF;
Insert into BOOKSTORE.CUST_ORDER (ORDER_ID,ORDER_DATE,CUSTOMER_ID,SHIPPING_METHOD_ID,DEST_ADDRESS_ID) values (101,to_date('05-01-2023','DD-MM-YYYY'),2,41,22);
Insert into BOOKSTORE.CUST_ORDER (ORDER_ID,ORDER_DATE,CUSTOMER_ID,SHIPPING_METHOD_ID,DEST_ADDRESS_ID) values (121,to_date('12-01-2023','DD-MM-YYYY'),2,42,22);
Insert into BOOKSTORE.CUST_ORDER (ORDER_ID,ORDER_DATE,CUSTOMER_ID,SHIPPING_METHOD_ID,DEST_ADDRESS_ID) values (81,to_date('04-01-2023','DD-MM-YYYY'),2,42,21);
REM INSERTING into BOOKSTORE.ORDER_HISTORY
SET DEFINE OFF;
Insert into BOOKSTORE.ORDER_HISTORY (HISTORY_ID,ORDER_ID,STATUS_ID,STATUS_DATE) values (121,101,1,to_date('05-01-2023','DD-MM-YYYY'));
Insert into BOOKSTORE.ORDER_HISTORY (HISTORY_ID,ORDER_ID,STATUS_ID,STATUS_DATE) values (141,121,1,to_date('12-01-2023','DD-MM-YYYY'));
Insert into BOOKSTORE.ORDER_HISTORY (HISTORY_ID,ORDER_ID,STATUS_ID,STATUS_DATE) values (101,81,1,to_date('04-01-2023','DD-MM-YYYY'));
Insert into BOOKSTORE.ORDER_HISTORY (HISTORY_ID,ORDER_ID,STATUS_ID,STATUS_DATE) values (102,81,21,to_date('04-01-2023','DD-MM-YYYY'));
REM INSERTING into BOOKSTORE.ORDER_LINE
SET DEFINE OFF;
Insert into BOOKSTORE.ORDER_LINE (LINE_ID,ORDER_ID,BOOK_ID,PRICE) values (101,101,104,9.66);
Insert into BOOKSTORE.ORDER_LINE (LINE_ID,ORDER_ID,BOOK_ID,PRICE) values (121,121,104,9.66);
Insert into BOOKSTORE.ORDER_LINE (LINE_ID,ORDER_ID,BOOK_ID,PRICE) values (122,121,107,10.99);
Insert into BOOKSTORE.ORDER_LINE (LINE_ID,ORDER_ID,BOOK_ID,PRICE) values (81,81,104,9.66);
Insert into BOOKSTORE.ORDER_LINE (LINE_ID,ORDER_ID,BOOK_ID,PRICE) values (82,81,109,14.99);
REM INSERTING into BOOKSTORE.ORDER_STATUS
SET DEFINE OFF;
Insert into BOOKSTORE.ORDER_STATUS (STATUS_ID,STATUS_VALUE) values (41,'??? ???????');
Insert into BOOKSTORE.ORDER_STATUS (STATUS_ID,STATUS_VALUE) values (42,'??? ???????');
Insert into BOOKSTORE.ORDER_STATUS (STATUS_ID,STATUS_VALUE) values (1,'??? ???????');
Insert into BOOKSTORE.ORDER_STATUS (STATUS_ID,STATUS_VALUE) values (21,'?? ????????');
REM INSERTING into BOOKSTORE.PUBLISHERS
SET DEFINE OFF;
Insert into BOOKSTORE.PUBLISHERS (PUBLISHER_ID,PUBLISHER_NAME) values (0,' ');
Insert into BOOKSTORE.PUBLISHERS (PUBLISHER_ID,PUBLISHER_NAME) values (61,'John Doe Publishers');
Insert into BOOKSTORE.PUBLISHERS (PUBLISHER_ID,PUBLISHER_NAME) values (62,'Jane Smith Books');
Insert into BOOKSTORE.PUBLISHERS (PUBLISHER_ID,PUBLISHER_NAME) values (63,'Acme Publishing Co.');
REM INSERTING into BOOKSTORE.SHIPPING_METHOD
SET DEFINE OFF;
Insert into BOOKSTORE.SHIPPING_METHOD (METHOD_ID,METHOD_NAME,COST) values (41,'??????',15);
Insert into BOOKSTORE.SHIPPING_METHOD (METHOD_ID,METHOD_NAME,COST) values (42,'??? ???',50);
Insert into BOOKSTORE.SHIPPING_METHOD (METHOD_ID,METHOD_NAME,COST) values (43,'??? ????',80);
Insert into BOOKSTORE.SHIPPING_METHOD (METHOD_ID,METHOD_NAME,COST) values (44,'??? ???',20);
REM INSERTING into BOOKSTORE.VERIFY_EMAIL_TB
SET DEFINE OFF;
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','425978','2023-01-03 16:07:56');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','190253','2023-01-03 16:08:50');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','147750','2023-01-03 16:16:03');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','754741','2023-01-03 16:24:57');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','543933','2023-01-03 16:26:48');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','174547','2023-01-03 16:27:29');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','573361','2023-01-03 16:28:10');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','792415','2023-01-03 16:33:04');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','398896','2023-01-03 16:34:15');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','532731','2023-01-03 16:43:39');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','649225','2023-01-03 16:44:31');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ads','90310420','2023-01-03 16:45:00');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','42101476','2023-01-03 16:45:06');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','43138546','2023-01-03 16:49:04');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','26091051','2023-01-03 16:52:12');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','16922884','2023-01-03 16:52:39');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','19510804','2023-01-03 16:53:18');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','68500835','2023-01-03 16:53:52');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','45907611','2023-01-03 16:54:30');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','76187881','2023-01-03 16:54:57');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','27287503','2023-01-03 16:55:06');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('zaheiyad02@gmail.com','62230027','2023-01-03 16:55:22');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','34528713','2023-01-03 17:24:42');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','12143210','2023-01-03 18:05:12');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','54370419','2023-01-03 18:06:15');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','29131662','2023-01-03 18:06:38');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','22150791','2023-01-03 18:07:38');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','73466660','2023-01-03 18:08:58');
Insert into BOOKSTORE.VERIFY_EMAIL_TB (EMAIL,CODE,DATE_HOURE) values ('ahmedalhopi2@gmail.com','11996259','2023-01-03 18:09:24');
--------------------------------------------------------
--  DDL for Index ADDRESS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."ADDRESS_PK" ON "BOOKSTORE"."ADDRESS" ("ADDRESS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ADDRESS_STATUS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."ADDRESS_STATUS_PK" ON "BOOKSTORE"."ADDRESS_STATUS" ("STATUS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUTHERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."AUTHERS_PK" ON "BOOKSTORE"."AUTHERS" ("AUTHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOKS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."BOOKS_PK" ON "BOOKSTORE"."BOOKS" ("BOOK_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOK_AUTHER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."BOOK_AUTHER_PK" ON "BOOKSTORE"."BOOK_AUTHER" ("BOOK_ID", "AUTHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOK_LANGUAGES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."BOOK_LANGUAGES_PK" ON "BOOKSTORE"."BOOK_LANGUAGES" ("LANGUAGE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index COUNTRY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."COUNTRY_PK" ON "BOOKSTORE"."COUNTRY" ("COUNTRY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CUSTMERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."CUSTMERS_PK" ON "BOOKSTORE"."CUSTMERS" ("CUSTMER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CUSTMER_ADDRESS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."CUSTMER_ADDRESS_PK" ON "BOOKSTORE"."CUSTMER_ADDRESS" ("CUSTMER_ID", "ADDRESS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CUST_ORDER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."CUST_ORDER_PK" ON "BOOKSTORE"."CUST_ORDER" ("ORDER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ORDER_HISTORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."ORDER_HISTORY_PK" ON "BOOKSTORE"."ORDER_HISTORY" ("HISTORY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ORDER_LINE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."ORDER_LINE_PK" ON "BOOKSTORE"."ORDER_LINE" ("LINE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PUBLISHERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."PUBLISHERS_PK" ON "BOOKSTORE"."PUBLISHERS" ("PUBLISHER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SHIPPING_METHOD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."SHIPPING_METHOD_PK" ON "BOOKSTORE"."SHIPPING_METHOD" ("METHOD_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TABLE1_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BOOKSTORE"."TABLE1_PK" ON "BOOKSTORE"."ORDER_STATUS" ("STATUS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger ADDRESS_STATUS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."ADDRESS_STATUS_TRG" 
BEFORE INSERT ON ADDRESS_STATUS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.STATUS_ID IS NULL THEN
      SELECT ADDRESS_STATUS_SEQ.NEXTVAL INTO :NEW.STATUS_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."ADDRESS_STATUS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ADDRESS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."ADDRESS_TRG" 
BEFORE INSERT ON ADDRESS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ADDRESS_ID IS NULL THEN
      SELECT ADDRESS_SEQ.NEXTVAL INTO :NEW.ADDRESS_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."ADDRESS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTHERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."AUTHERS_TRG" 
BEFORE INSERT ON AUTHERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.AUTHER_ID IS NULL THEN
      SELECT AUTHERS_SEQ.NEXTVAL INTO :NEW.AUTHER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."AUTHERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."BOOKS_TRG" 
BEFORE INSERT ON BOOKS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."BOOKS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_LANGUAGES_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."BOOK_LANGUAGES_TRG" 
BEFORE INSERT ON BOOK_LANGUAGES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.LANGUAGE_ID IS NULL THEN
      SELECT BOOK_LANGUAGES_SEQ.NEXTVAL INTO :NEW.LANGUAGE_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."BOOK_LANGUAGES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger COUNTRY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."COUNTRY_TRG" 
BEFORE INSERT ON COUNTRY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.COUNTRY_ID IS NULL THEN
      SELECT COUNTRY_SEQ.NEXTVAL INTO :NEW.COUNTRY_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."COUNTRY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CUSTMERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."CUSTMERS_TRG" 
BEFORE INSERT ON CUSTMERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.CUSTMER_ID IS NULL THEN
      SELECT CUSTMERS_SEQ.NEXTVAL INTO :NEW.CUSTMER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."CUSTMERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CUST_ORDER_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."CUST_ORDER_TRG" 
BEFORE INSERT ON CUST_ORDER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ORDER_ID IS NULL THEN
      SELECT CUST_ORDER_SEQ.NEXTVAL INTO :NEW.ORDER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."CUST_ORDER_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ORDER_HISTORY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."ORDER_HISTORY_TRG" 
BEFORE INSERT ON ORDER_HISTORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.HISTORY_ID IS NULL THEN
      SELECT ORDER_HISTORY_SEQ.NEXTVAL INTO :NEW.HISTORY_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."ORDER_HISTORY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ORDER_LINE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."ORDER_LINE_TRG" 
BEFORE INSERT ON ORDER_LINE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.LINE_ID IS NULL THEN
      SELECT ORDER_LINE_SEQ.NEXTVAL INTO :NEW.LINE_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."ORDER_LINE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ORDER_STATUS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."ORDER_STATUS_TRG" 
BEFORE INSERT ON ORDER_STATUS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.STATUS_ID IS NULL THEN
      SELECT ORDER_STATUS_SEQ.NEXTVAL INTO :NEW.STATUS_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."ORDER_STATUS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PUBLISHERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."PUBLISHERS_TRG" 
BEFORE INSERT ON PUBLISHERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PUBLISHER_ID IS NULL THEN
      SELECT PUBLISHERS_SEQ.NEXTVAL INTO :NEW.PUBLISHER_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."PUBLISHERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SHIPPING_METHOD_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "BOOKSTORE"."SHIPPING_METHOD_TRG" 
BEFORE INSERT ON SHIPPING_METHOD 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.METHOD_ID IS NULL THEN
      SELECT SHIPPING_METHOD_SEQ.NEXTVAL INTO :NEW.METHOD_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "BOOKSTORE"."SHIPPING_METHOD_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure PRINT_BOOKS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "BOOKSTORE"."PRINT_BOOKS" (
    p_out out SYS_REFCURSOR
) IS
BEGIN
open p_out for
    SELECT
        book_id,
        title,
        isbn13,
        lang_id,
        num_pages,
        publication_date,
        publisher_id
    FROM
        books;

END;

/
--------------------------------------------------------
--  DDL for Package ADMIN_OPERATION_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "BOOKSTORE"."ADMIN_OPERATION_PKG" AS
------------------------------------------------------------BOOK OPERATIONS
    PROCEDURE get_all_books (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_book_by_id (
        p_book_id IN books.book_id%TYPE DEFAULT NULL,
        p_out     OUT SYS_REFCURSOR
    );

    PROCEDURE insert_book (
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL,
        p_image            IN books.path%TYPE ,
        p_price            IN books.price%TYPE DEFAULT NULL,
        p_auther_id        IN authers.auther_id%TYPE DEFAULT NULL,
        p_out_code         OUT NUMBER
    );

    PROCEDURE delete_book (
        p_book_id  IN books.book_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE update_book (
        p_book_id          IN books.book_id%TYPE DEFAULT NULL,
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL,
--        p_image            IN books.image%TYPE DEFAULT NULL,
        p_price            IN books.price%TYPE DEFAULT NULL,
        p_auther_id1       IN authers.auther_id%TYPE DEFAULT NULL,
        p_auther_id2       IN authers.auther_id%TYPE DEFAULT NULL,
        p_out_code         OUT NUMBER
    );
-------------------------------------------------------------

    PROCEDURE get_auther_and_books_number (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_custmers (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_custmer_address (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_out1       OUT SYS_REFCURSOR,
        p_out2       OUT SYS_REFCURSOR
    );

---------------------------------------------------------------

    PROCEDURE get_custmer_orders (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_custmer_order_det (
        p_order_id IN cust_order.order_id%TYPE DEFAULT NULL,
        p_out1     OUT SYS_REFCURSOR,
        p_out2     OUT SYS_REFCURSOR
    );

    PROCEDURE update_order_status (
        p_order_id  IN order_history.order_id%TYPE DEFAULT NULL,
        p_status_id IN order_history.status_id%TYPE DEFAULT NULL,
        p_code      OUT NUMBER
    );

END admin_operation_pkg;

/
--------------------------------------------------------
--  DDL for Package BOOK_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "BOOKSTORE"."BOOK_PKG" AS
    PROCEDURE login (
        p_email    IN VARCHAR2,
        p_password IN VARCHAR2,
        p_code     OUT NUMBER
    );

    PROCEDURE get_books (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_author (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_customer (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_autor_for_book (
        p_id  IN NUMBER,
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_custmore_address (
        p_id  IN NUMBER,
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_author_books (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE insert_book (
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_isbn13           IN books.isbn13%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL
    );

    PROCEDURE delete_book (
        p_book_id IN books.book_id%TYPE DEFAULT NULL
    );

    PROCEDURE update_book (
        p_book_id          IN books.book_id%TYPE DEFAULT NULL,
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_isbn13           IN books.isbn13%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL
    );

    PROCEDURE get_book_by_id (
        p_book_id IN books.book_id%TYPE DEFAULT NULL,
        p_out     OUT SYS_REFCURSOR
    );

END book_pkg;

/
--------------------------------------------------------
--  DDL for Package CONSTANTS_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "BOOKSTORE"."CONSTANTS_PKG" AS

------------------------------------AUTHER

    PROCEDURE insert_author (
        p_name     IN authers.auther_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE update_author (
        p_auther_id IN authers.auther_id%TYPE DEFAULT NULL,
        p_name      IN authers.auther_name%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    );

    PROCEDURE delete_author (
        p_auther_id IN authers.auther_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    );

    PROCEDURE get_author (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_author_by_id (
        p_auther_id IN authers.auther_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    );

------------------------------------PUBLISHER

    PROCEDURE insert_publisher (
        p_name     IN publishers.publisher_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE update_publisher (
        p_publisher_id IN publishers.publisher_id%TYPE DEFAULT NULL,
        p_name         IN publishers.publisher_name%TYPE DEFAULT NULL,
        p_out_code     OUT NUMBER
    );

    PROCEDURE delete_publisher (
        p_publisher_id IN publishers.publisher_id%TYPE DEFAULT NULL,
        p_out_code     OUT NUMBER
    );

    PROCEDURE get_publisher (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_publisher_by_id (
        p_publisher_id IN publishers.publisher_id%TYPE DEFAULT NULL,
        p_out          OUT SYS_REFCURSOR
    );

------------------------------------COUNTRY

    PROCEDURE insert_country (
        p_name     IN country.country_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE update_country (
        p_country_id IN country.country_id%TYPE DEFAULT NULL,
        p_name       IN country.country_name%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    );

    PROCEDURE delete_country (
        p_country_id IN country.country_id%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    );

    PROCEDURE get_country (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_country_by_id (
        p_country_id IN country.country_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    );

------------------------------------ADDRESS

    PROCEDURE insert_address (
--        p_street_number IN address.street_number%TYPE DEFAULT NULL,
        p_street_name   IN address.street_name%TYPE DEFAULT NULL,
        p_city          IN address.city%TYPE DEFAULT NULL,
        p_country_id    IN address.country_id%TYPE DEFAULT NULL,
        p_out_code      OUT NUMBER
    );

    PROCEDURE update_address (
        p_address_id    IN address.address_id%TYPE DEFAULT NULL,
--        p_street_number IN address.street_number%TYPE DEFAULT NULL,
        p_street_name   IN address.street_name%TYPE DEFAULT NULL,
        p_city          IN address.city%TYPE DEFAULT NULL,
        p_country_id    IN address.country_id%TYPE DEFAULT NULL,
        p_out_code      OUT NUMBER
    );

    PROCEDURE delete_address (
        p_address_id IN address.address_id%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    );

    PROCEDURE get_address (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_address_py_id (
        p_address_id IN address.address_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    );

------------------------------------ORDER_STATUS

    PROCEDURE insert_order_status (
        p_name     IN order_status.status_value%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE update_order_status (
        p_status_id IN order_status.status_id%TYPE DEFAULT NULL,
        p_name      IN order_status.status_value%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    );

    PROCEDURE delete_order_status (
        p_status_id IN order_status.status_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    );

    PROCEDURE get_order_status (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_order_status_by_id (
        p_status_id IN order_status.status_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    );

------------------------------------BOOK_LANGUAGES

    PROCEDURE insert_book_language (
--        p_code     IN book_languages.language_code%TYPE DEFAULT NULL,
        p_name     IN book_languages.language_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE update_book_language (
        p_language_id IN book_languages.language_id%TYPE DEFAULT NULL,
--        p_code        IN book_languages.language_code%TYPE DEFAULT NULL,
        p_name        IN book_languages.language_name%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    );

    PROCEDURE delete_book_language (
        p_language_id IN book_languages.language_id%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    );

    PROCEDURE get_book_language (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_book_language_by_id (
        p_language_id IN book_languages.language_id%TYPE DEFAULT NULL,
        p_out         OUT SYS_REFCURSOR
    );

------------------------------------ADDRESS_STATUS

    PROCEDURE insert_address_status (
        p_name     IN address_status.address_status%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE update_address_status (
        p_status_id IN address_status.status_id%TYPE DEFAULT NULL,
        p_name      IN address_status.address_status%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    );

    PROCEDURE delete_address_status (
        p_status_id IN address_status.status_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    );

    PROCEDURE get_address_status (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_address_status_by_id (
        p_status_id IN address_status.status_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    );

------------------------------------SHIPPING_METHOD

    PROCEDURE insert_shipping_method (
        p_method_name IN shipping_method.method_name%TYPE DEFAULT NULL,
        p_cost        IN shipping_method.cost%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    );

    PROCEDURE update_shipping_method (
        p_method_id   IN shipping_method.method_id%TYPE DEFAULT NULL,
        p_method_name IN shipping_method.method_name%TYPE DEFAULT NULL,
        p_cost        IN shipping_method.cost%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    );

    PROCEDURE delete_shipping_method (
        p_method_id IN shipping_method.method_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    );

    PROCEDURE get_shipping_method (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_shipping_method_by_id (
        p_method_id IN shipping_method.method_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    );

END constants_pkg;

/
--------------------------------------------------------
--  DDL for Package PERMISSION_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "BOOKSTORE"."PERMISSION_PKG" AS
    PROCEDURE create_account (
        p_first_name IN custmers.first_name%TYPE DEFAULT NULL,
        p_last_name  IN custmers.last_name%TYPE DEFAULT NULL,
        p_email      IN custmers.email%TYPE DEFAULT NULL,
        p_password   IN custmers.password%TYPE DEFAULT NULL,
        p_id         OUT NUMBER,
        p_out_code   OUT NUMBER
    );

    PROCEDURE verify_email (
        p_email    IN verify_email_tb.email%TYPE DEFAULT NULL,
        p_code     IN verify_email_tb.code%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE send_code (
        p_email IN verify_email_tb.email%TYPE DEFAULT NULL,
        p_code  OUT verify_email_tb.code%TYPE
    );

    PROCEDURE login (
        p_email      IN custmers.email%TYPE DEFAULT NULL,
        p_password   IN custmers.password%TYPE DEFAULT NULL,
        p_custmer_id OUT custmers.admin%TYPE,
        p_admin      OUT custmers.admin%TYPE,
        p_first_name OUT custmers.first_name%TYPE,
        p_last_name  OUT custmers.last_name%TYPE,
        p_image      OUT CLOB,
        p_out_code   OUT NUMBER
    );

    PROCEDURE update_custmer (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_first_name IN custmers.first_name%TYPE DEFAULT NULL,
        p_last_name  IN custmers.last_name%TYPE DEFAULT NULL,
        p_password   IN custmers.password%TYPE DEFAULT NULL,
--        p_image      IN custmers.image%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    );

END permission_pkg;

/
--------------------------------------------------------
--  DDL for Package USER_OPRATIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "BOOKSTORE"."USER_OPRATIONS_PKG" AS
    PROCEDURE get_all_books (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_book_by_id (
        p_book_id IN books.book_id%TYPE DEFAULT NULL,
        p_out     OUT SYS_REFCURSOR
    );

    PROCEDURE get_orders_by_custmer_id_done (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    );

    PROCEDURE get_orders_by_custmer_id_not (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    );

    PROCEDURE get_auther_and_books_number (
        p_out OUT SYS_REFCURSOR
    );
    PROCEDURE get_publisher_and_books_number (
        p_out OUT SYS_REFCURSOR
    );

    PROCEDURE get_order_details (
        p_order_id IN cust_order.order_id%TYPE DEFAULT NULL,
        p_status   OUT NUMBER,
        p_out1     OUT SYS_REFCURSOR,
        p_out2     OUT SYS_REFCURSOR
    );

    PROCEDURE add_order (
        p_custmer_id IN cust_order.customer_id%TYPE DEFAULT NULL,
        p_order_id   OUT cust_order.order_id%TYPE,
        p_out_code   OUT NUMBER
    );

    PROCEDURE delete_order (
        p_order_id IN cust_order.order_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE add_book_to_order (
        p_order_id IN order_line.order_id%TYPE DEFAULT NULL,
        p_book_id  IN order_line.book_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE delete_book_from_order (
        p_line_id  IN order_line.line_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    );

    PROCEDURE save_order (
        p_order_id           IN cust_order.order_id%TYPE DEFAULT NULL,
        p_shipping_method_id IN cust_order.shipping_method_id%TYPE DEFAULT NULL,
        p_dest_address_id    IN cust_order.dest_address_id%TYPE DEFAULT NULL,
        p_out_code           OUT NUMBER
    );

    PROCEDURE shearch_book (
        p_title        IN books.title%TYPE DEFAULT NULL,
        p_language_id  IN books.language_id%TYPE DEFAULT NULL,
        p_publisher_id IN books.publisher_id%TYPE DEFAULT NULL,
        p_auther_id    IN authers.auther_id%TYPE DEFAULT NULL,
        p_count        OUT NUMBER,
        p_out          OUT SYS_REFCURSOR
    );

END user_oprations_pkg;

/
--------------------------------------------------------
--  DDL for Package Body ADMIN_OPERATION_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "BOOKSTORE"."ADMIN_OPERATION_PKG" AS
------------------------------------------------------------BOOK OPERATIONS
    PROCEDURE get_all_books (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           book_id                                 id,
                           title,
                           num_pages,
                           get_auther_for_book(book_id)            authers,
                           get_publisher_for_book(publisher_id)    publisher,
                           to_char(publication_date, 'yyyy/mm/dd') publication_date,
                           get_languge_for_book(language_id)       language,
                           price,
                           image,
                           path
                       FROM
                           books;

    END get_all_books;

    PROCEDURE get_book_by_id (
        p_book_id IN books.book_id%TYPE DEFAULT NULL,
        p_out     OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           book_id                                 id,
                           title,
                           num_pages,
                           to_char(publication_date, 'yyyy-mm-dd') date2,
                           get_auther_id_for_book(book_id)         auth_id,
                           publisher_id                            publ_id,
                           language_id                             lang_id,
                           image,
                           price
                       FROM
                           books
                       WHERE
                           book_id = p_book_id;

    END get_book_by_id;

    PROCEDURE insert_book (
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL,
        p_image            IN books.path%TYPE ,
        p_price            IN books.price%TYPE DEFAULT NULL,
        p_auther_id        IN authers.auther_id%TYPE DEFAULT NULL,
        p_out_code         OUT NUMBER
    ) AS
        v_id NUMBER;
    BEGIN
        INSERT INTO books (
            title,
            language_id,
            num_pages,
            publication_date,
            publisher_id,
            path,
            price
        ) VALUES (
            p_title,
            p_language_id,
            p_num_pages,
            to_date(p_publication_date, 'yyyy-mm-dd hh:mi:ss'),
            p_publisher_id,
            p_image,
            p_price
        ) RETURNing book_id into v_id;

        INSERT INTO book_auther (
            book_id,
            auther_id
        ) VALUES (
            v_id,
            p_auther_id
        );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_book;

    PROCEDURE delete_book (
        p_book_id  IN books.book_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        DELETE FROM book_auther
        WHERE
            book_id = p_book_id;

        DELETE FROM order_line
        WHERE
            book_id = p_book_id;

        DELETE FROM books
        WHERE
            book_id = p_book_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_book;

    PROCEDURE update_book (
        p_book_id          IN books.book_id%TYPE DEFAULT NULL,
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL,
--        p_image            IN books.image%TYPE DEFAULT NULL,
        p_price            IN books.price%TYPE DEFAULT NULL,
        p_auther_id1       IN authers.auther_id%TYPE DEFAULT NULL,
        p_auther_id2       IN authers.auther_id%TYPE DEFAULT NULL,
        p_out_code         OUT NUMBER
    ) AS
    BEGIN
        UPDATE books
        SET
            title = p_title,
            language_id = p_language_id,
            num_pages = p_num_pages,
            publication_date = to_date(p_publication_date, 'yyyy-mm-dd hh:mi:ss'),
            publisher_id = p_publisher_id,
--            image = p_image,
            price = p_price
        WHERE
            book_id = p_book_id;

        UPDATE book_auther
        SET
            auther_id = p_auther_id1
        WHERE
                book_id = p_book_id
            AND auther_id = p_auther_id2;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_book;
 -------------------------------------------------------------

    PROCEDURE get_auther_and_books_number (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           a.auther_name     name,
                           COUNT(ba.book_id) count
                       FROM
                           book_auther ba,
                           authers     a
                       WHERE
                           ba.auther_id = a.auther_id
                       GROUP BY
                           a.auther_name;

    END get_auther_and_books_number;

    PROCEDURE get_custmers (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           custmer_id id,
                           first_name fname,
                           last_name  lname,
                           email,
                           image,
                           CASE
                               WHEN admin = 1 THEN
                                   '????'
                               ELSE
                                   '????'
                           END        is_admin
                       FROM
                           custmers;

    END;

    PROCEDURE get_custmer_address (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_out1       OUT SYS_REFCURSOR,
        p_out2       OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out1 FOR SELECT
                            custmer_id   id,
                            first_name
                            || ' '
                            || last_name name,
                            email,
                            image,
                            CASE
                                WHEN admin = 1 THEN
                                    '????'
                                ELSE
                                    '????'
                            END          is_admin
                        FROM
                            custmers
                        WHERE
                            custmer_id = p_custmer_id;

        OPEN p_out2 FOR SELECT
                           get_dest_address(address_id)  address,
                           get_address_status(status_id) status
                       FROM
                           custmer_address
                       WHERE
                           custmer_id = p_custmer_id;

    END get_custmer_address;
---------------------------------------------------------------

    PROCEDURE get_custmer_orders (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           order_id                                     oid,
                           customer_id                                  cid,
                           to_char(order_date, 'yyyy/mm/dd')            order_date2,
                           get_shipping_method_name(shipping_method_id) shipping_method,
                           get_dest_address(dest_address_id)            address,
                           get_total_cost(order_id, shipping_method_id) cost,
                           get_order_status(order_id)                   status,
                           get_order_last_date(order_id)                lastdate
                       FROM
                           cust_order
                       WHERE
                           shipping_method_id IS NOT NULL
                       ORDER BY
                           order_date DESC;

    END get_custmer_orders;

    PROCEDURE get_custmer_order_det (
        p_order_id IN cust_order.order_id%TYPE DEFAULT NULL,
        p_out1     OUT SYS_REFCURSOR,
        p_out2     OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out1 FOR SELECT
                            co.order_id                                        oid,
                            co.customer_id                                     cid,
                            to_char(co.order_date, 'yyyy/mm/dd')               order_date2,
                            get_shipping_method_name(co.shipping_method_id)    shipping_method,
                            get_dest_address(co.dest_address_id)               address,
                            get_total_cost(co.order_id, co.shipping_method_id) cost,
                            get_order_status(co.order_id)                      status,
                            get_order_status_num(co.order_id)                  statusnum,
                            get_order_last_date(co.order_id)                   lastdate,
                            c.email                                            email,
                            c.first_name                                       fname,
                            c.last_name                                        lname
                        FROM
                            cust_order co,
                            custmers   c
                        WHERE
                                co.customer_id = c.custmer_id
                            AND co.order_id = p_order_id;

        OPEN p_out2 FOR SELECT
                           line_id                 id,
                           get_book_title(book_id) title,
                           price
                       FROM
                           order_line
                       WHERE
                           order_id = p_order_id;

    END get_custmer_order_det;

    PROCEDURE update_order_status (
        p_order_id  IN order_history.order_id%TYPE DEFAULT NULL,
        p_status_id IN order_history.status_id%TYPE DEFAULT NULL,
        p_code      OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO order_history (
            order_id,
            status_id,
            status_date
        ) VALUES (
            p_order_id,
            p_status_id,
            sysdate
        );

        p_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_code := 2;
    END update_order_status;

END admin_operation_pkg;

/
--------------------------------------------------------
--  DDL for Package Body BOOK_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "BOOKSTORE"."BOOK_PKG" AS

    PROCEDURE login (
        p_email    IN VARCHAR2,
        p_password IN VARCHAR2,
        p_code     OUT NUMBER
    ) AS
        v_count NUMBER := 0;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            custmers
        WHERE
                email = p_email
            AND password = p_password;

        IF v_count > 0 THEN
            p_code := 1;
        ELSE
            p_code := 2;
        END IF;

    END;

    PROCEDURE get_books (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           book_id,
                           title,
                           isbn13,
                           language_id,
                           num_pages,
                           publication_date,
                           publisher_id
                       FROM
                           books;

    END;

    PROCEDURE get_author (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           auther_id,
                           auther_name
                       FROM
                           authers;

    END;

    PROCEDURE get_customer (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           custmer_id,
                           first_name,
                           last_name,
                           email,
                           password,
                           admin,
                           image
                       FROM
                           custmers;

    END;

    PROCEDURE get_autor_for_book (
        p_id  IN NUMBER,
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           b.title,
                           a.auther_name
                       FROM
                           books       b,
                           book_auther ba,
                           authers     a
                       WHERE
                               b.book_id = ba.book_id
                           AND ba.auther_id = a.auther_id
                           AND b.book_id = p_id;

    END;

    PROCEDURE get_custmore_address (
        p_id  IN NUMBER,
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           first_name,
                           last_name,
                           city,
                           address_status
                       FROM
                           custmers        c,
                           custmer_address ca,
                           address_status  ast,
                           address         a
                       WHERE
                               c.custmer_id = ca.custmer_id
                           AND ca.address_id = a.address_id
                           AND ca.status_id = ast.status_id
                           AND c.custmer_id = p_id;

    END;

    PROCEDURE get_author_books (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           auther_name,
                           COUNT(book_id) count
                       FROM
                           authers     a,
                           book_auther b
                       WHERE
                           a.auther_id = b.auther_id
                       GROUP BY
                           auther_name;

    END;

    PROCEDURE insert_book (
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_isbn13           IN books.isbn13%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL
    ) AS
        v_id NUMBER;
    BEGIN
        INSERT INTO books (
            title,
            language_id,
            num_pages,
            publication_date,
            publisher_id,
            isbn13
        ) VALUES (
            p_title,
            p_language_id,
            p_num_pages,
            to_date(p_publication_date, 'yyyy-mm-dd hh:mi:ss'),
            p_publisher_id,
            p_isbn13
        );

    END insert_book;

    PROCEDURE delete_book (
        p_book_id IN books.book_id%TYPE DEFAULT NULL
    ) AS
    BEGIN
        DELETE FROM book_auther
        WHERE
            book_id = p_book_id;

        DELETE FROM order_line
        WHERE
            book_id = p_book_id;

        DELETE FROM books
        WHERE
            book_id = p_book_id;

    END delete_book;

    PROCEDURE update_book (
        p_book_id          IN books.book_id%TYPE DEFAULT NULL,
        p_title            IN books.title%TYPE DEFAULT NULL,
        p_language_id      IN books.language_id%TYPE DEFAULT NULL,
        p_num_pages        IN books.num_pages%TYPE DEFAULT NULL,
        p_isbn13           IN books.isbn13%TYPE DEFAULT NULL,
        p_publication_date IN VARCHAR2 DEFAULT NULL,
        p_publisher_id     IN books.publisher_id%TYPE DEFAULT NULL
    ) AS
    BEGIN
        UPDATE books
        SET
            title = p_title,
            language_id = p_language_id,
            num_pages = p_num_pages,
            publication_date = to_date(p_publication_date, 'yyyy-mm-dd hh:mi:ss'),
            publisher_id = p_publisher_id,
            isbn13 = p_isbn13
        WHERE
            book_id = p_book_id;

    END update_book;
    PROCEDURE get_book_by_id (
        p_book_id IN books.book_id%TYPE DEFAULT NULL,
        p_out     OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           book_id,
                           title,
                           isbn13,
                           language_id,
                           num_pages,
                           publication_date,
                           publisher_id
                       FROM
                           books
                           where book_id = p_book_id;

    END;

END book_pkg;

/
--------------------------------------------------------
--  DDL for Package Body CONSTANTS_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "BOOKSTORE"."CONSTANTS_PKG" AS

------------------------------------AUTHER

    PROCEDURE insert_author (
        p_name     IN authers.auther_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO authers ( auther_name ) VALUES ( p_name );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_author;

    PROCEDURE update_author (
        p_auther_id IN authers.auther_id%TYPE DEFAULT NULL,
        p_name      IN authers.auther_name%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    ) AS
    BEGIN
        UPDATE authers
        SET
            auther_name = p_name
        WHERE
            auther_id = p_auther_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_author;

    PROCEDURE delete_author (
        p_auther_id IN authers.auther_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    ) AS
    BEGIN
        DELETE authers
        WHERE
            auther_id = p_auther_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_author;

    PROCEDURE get_author (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           auther_id   id,
                           auther_name name
                       FROM
                           authers order by id ;

    END get_author;

    PROCEDURE get_author_by_id (
        p_auther_id IN authers.auther_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           auther_id   id,
                           auther_name name
                       FROM
                           authers
                       WHERE
                           auther_id = p_auther_id;

    END get_author_by_id;

------------------------------------PUBLISHER

    PROCEDURE insert_publisher (
        p_name     IN publishers.publisher_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO publishers ( PUBLISHER_NAME ) VALUES ( p_name );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_publisher;

    PROCEDURE update_publisher (
        p_publisher_id IN publishers.publisher_id%TYPE DEFAULT NULL,
        p_name         IN publishers.publisher_name%TYPE DEFAULT NULL,
        p_out_code     OUT NUMBER
    ) AS
    BEGIN
        UPDATE publishers
        SET
            publisher_name = p_name
        WHERE
            publisher_id = p_publisher_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_publisher;

    PROCEDURE delete_publisher (
        p_publisher_id IN publishers.publisher_id%TYPE DEFAULT NULL,
        p_out_code     OUT NUMBER
    ) AS
    BEGIN
        DELETE publishers
        WHERE
            publisher_id = p_publisher_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_publisher;

    PROCEDURE get_publisher (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           publisher_id   id,
                           publisher_name name
                       FROM
                           publishers order by publisher_id ;

    END get_publisher;

    PROCEDURE get_publisher_by_id (
        p_publisher_id IN publishers.publisher_id%TYPE DEFAULT NULL,
        p_out          OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           publisher_id   id,
                           publisher_name name
                       FROM
                           publishers
                       WHERE
                           publisher_id = p_publisher_id;

    END get_publisher_by_id;

------------------------------------COUNTRY

    PROCEDURE insert_country (
        p_name     IN country.country_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO country ( COUNTRY_NAME ) VALUES ( p_name );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_country;

    PROCEDURE update_country (
        p_country_id IN country.country_id%TYPE DEFAULT NULL,
        p_name       IN country.country_name%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    ) AS
    BEGIN
        UPDATE country
        SET
            country_name = p_name
        WHERE
            country_id = p_country_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_country;

    PROCEDURE delete_country (
        p_country_id IN country.country_id%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    ) AS
    BEGIN
        DELETE country
        WHERE
            country_id = p_country_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_country;

    PROCEDURE get_country (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           country_id   id,
                           country_name name
                       FROM
                           country;

    END get_country;

    PROCEDURE get_country_by_id (
        p_country_id IN country.country_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           country_id   id,
                           country_name name
                       FROM
                           country
                       WHERE
                           country_id = p_country_id;

    END get_country_by_id;

------------------------------------ADDRESS

    PROCEDURE insert_address (
--        p_street_number IN address.street_number%TYPE DEFAULT NULL,
        p_street_name   IN address.street_name%TYPE DEFAULT NULL,
        p_city          IN address.city%TYPE DEFAULT NULL,
        p_country_id    IN address.country_id%TYPE DEFAULT NULL,
        p_out_code      OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO address (
--            street_number,
            street_name,
            city,
            country_id
        ) VALUES (
--            p_street_number,
            p_street_name,
            p_city,
            p_country_id
        );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_address;

    PROCEDURE update_address (
        p_address_id    IN address.address_id%TYPE DEFAULT NULL,
--        p_street_number IN address.street_number%TYPE DEFAULT NULL,
        p_street_name   IN address.street_name%TYPE DEFAULT NULL,
        p_city          IN address.city%TYPE DEFAULT NULL,
        p_country_id    IN address.country_id%TYPE DEFAULT NULL,
        p_out_code      OUT NUMBER
    ) AS
    BEGIN
        UPDATE address
        SET
--            street_number = p_street_number,
            street_name = p_street_name,
            city = p_city,
            country_id = p_country_id
        WHERE
            address_id = p_address_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_address;

    PROCEDURE delete_address (
        p_address_id IN address.address_id%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    ) AS
    BEGIN
        DELETE address
        WHERE
            address_id = p_address_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_address;

    PROCEDURE get_address (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           address_id    id,
                           get_dest_address(address_id) full_address,
                           street_number num,
                           street_name   name,
                           city,
                           country_id    cid
                       FROM
                           address;

    END get_address;

    PROCEDURE get_address_py_id (
        p_address_id IN address.address_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           address_id    id,
                           street_number num,
                           street_name   name,
                           city,
                           country_id    cid
                       FROM
                           address
                       WHERE
                           address_id = p_address_id;

    END get_address_py_id;

------------------------------------ORDER_STATUS

    PROCEDURE insert_order_status (
        p_name     IN order_status.status_value%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO order_status ( status_value ) VALUES ( p_name );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_order_status;

    PROCEDURE update_order_status (
        p_status_id IN order_status.status_id%TYPE DEFAULT NULL,
        p_name      IN order_status.status_value%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    ) AS
    BEGIN
        UPDATE order_status
        SET
            status_value = p_name
        WHERE
            status_id = p_status_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_order_status;

    PROCEDURE delete_order_status (
        p_status_id IN order_status.status_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    ) AS
    BEGIN
        DELETE order_status
        WHERE
            status_id = p_status_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_order_status;

    PROCEDURE get_order_status (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           status_id    id,
                           status_value name
                       FROM
                           order_status;

    END get_order_status;

    PROCEDURE get_order_status_by_id (
        p_status_id IN order_status.status_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           status_id    id,
                           status_value name
                       FROM
                           order_status
                       WHERE
                           status_id = p_status_id;

    END get_order_status_by_id;

------------------------------------BOOK_LANGUAGES

    PROCEDURE insert_book_language (
--        p_code     IN book_languages.language_code%TYPE DEFAULT NULL,
        p_name     IN book_languages.language_name%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO book_languages (
--            language_code,
            language_name
        ) VALUES (
--            p_code,
            p_name
        );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_book_language;

    PROCEDURE update_book_language (
        p_language_id IN book_languages.language_id%TYPE DEFAULT NULL,
--        p_code        IN book_languages.language_code%TYPE DEFAULT NULL,
        p_name        IN book_languages.language_name%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    ) AS
    BEGIN
        UPDATE book_languages
        SET
--            language_code = p_code,
            language_name = p_name
        WHERE
            language_id = p_language_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_book_language;

    PROCEDURE delete_book_language (
        p_language_id IN book_languages.language_id%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    ) AS
    BEGIN
        DELETE FROM book_languages
        WHERE
            language_id = p_language_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_book_language;

    PROCEDURE get_book_language (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           language_id   id,
                           language_code code,
                           language_name name
                       FROM
                           book_languages order by id ;

    END get_book_language;

    PROCEDURE get_book_language_by_id (
        p_language_id IN book_languages.language_id%TYPE DEFAULT NULL,
        p_out         OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           language_id   id,
                           language_code code,
                           language_name name
                       FROM
                           book_languages
                       WHERE
                           language_id = p_language_id;

    END get_book_language_by_id;

------------------------------------ADDRESS_STATUS

    PROCEDURE insert_address_status (
        p_name     IN address_status.address_status%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO address_status ( address_status ) VALUES ( p_name );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_address_status;

    PROCEDURE update_address_status (
        p_status_id IN address_status.status_id%TYPE DEFAULT NULL,
        p_name      IN address_status.address_status%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    ) AS
    BEGIN
        UPDATE address_status
        SET
            address_status = p_name
        WHERE
            status_id = p_status_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_address_status;

    PROCEDURE delete_address_status (
        p_status_id IN address_status.status_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    ) AS
    BEGIN
        DELETE address_status
        WHERE
            status_id = p_status_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_address_status;

    PROCEDURE get_address_status (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           status_id      id,
                           address_status status
                       FROM
                           address_status;

    END get_address_status;

    PROCEDURE get_address_status_by_id (
        p_status_id IN address_status.status_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           status_id      id,
                           address_status status
                       FROM
                           address_status
                       WHERE
                           status_id = p_status_id;

    END get_address_status_by_id;

------------------------------------SHIPPING_METHOD

    PROCEDURE insert_shipping_method (
        p_method_name IN shipping_method.method_name%TYPE DEFAULT NULL,
        p_cost        IN shipping_method.cost%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO shipping_method (
            method_name,
            cost
        ) VALUES (
            p_method_name,
            p_cost
        );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END insert_shipping_method;

    PROCEDURE update_shipping_method (
        p_method_id   IN shipping_method.method_id%TYPE DEFAULT NULL,
        p_method_name IN shipping_method.method_name%TYPE DEFAULT NULL,
        p_cost        IN shipping_method.cost%TYPE DEFAULT NULL,
        p_out_code    OUT NUMBER
    ) AS
    BEGIN
        UPDATE shipping_method
        SET
            method_name = p_method_name,
            cost = p_cost
        WHERE
            method_id = p_method_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_shipping_method;

    PROCEDURE delete_shipping_method (
        p_method_id IN shipping_method.method_id%TYPE DEFAULT NULL,
        p_out_code  OUT NUMBER
    ) AS
    BEGIN
        DELETE FROM shipping_method
        WHERE
            method_id = p_method_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_shipping_method;

    PROCEDURE get_shipping_method (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           method_id   id,
                           method_name name,
                           cost
                       FROM
                           shipping_method;

    END get_shipping_method;

    PROCEDURE get_shipping_method_by_id (
        p_method_id IN shipping_method.method_id%TYPE DEFAULT NULL,
        p_out       OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           method_id   id,
                           method_name name,
                           cost
                       FROM
                           shipping_method
                       WHERE
                           method_id = p_method_id;

    END get_shipping_method_by_id;

END constants_pkg;

/
--------------------------------------------------------
--  DDL for Package Body PERMISSION_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "BOOKSTORE"."PERMISSION_PKG" AS

    PROCEDURE create_account (
        p_first_name IN custmers.first_name%TYPE DEFAULT NULL,
        p_last_name  IN custmers.last_name%TYPE DEFAULT NULL,
        p_email      IN custmers.email%TYPE DEFAULT NULL,
        p_password   IN custmers.password%TYPE DEFAULT NULL,
        p_id         OUT NUMBER,
        p_out_code   OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO custmers (
            first_name,
            last_name,
            email,
            password
        ) VALUES (
            p_first_name,
            p_last_name,
            p_email,
            p_password
        ) RETURNING custmer_id INTO p_id;

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END create_account;

    PROCEDURE verify_email (
        p_email    IN verify_email_tb.email%TYPE DEFAULT NULL,
        p_code     IN verify_email_tb.code%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
        v_count NUMBER DEFAULT 0;
    BEGIN
        SELECT
            COUNT(email)
        INTO v_count
        FROM
            verify_email_tb
        WHERE
                email = p_email
            AND code = p_code;

        IF v_count > 0 THEN
            p_out_code := 1;
            DELETE verify_email_tb
            WHERE
                    email = p_email
                AND code = p_code;

        ELSE
            p_out_code := 3;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END verify_email;

    PROCEDURE send_code (
        p_email IN verify_email_tb.email%TYPE DEFAULT NULL,
        p_code  OUT verify_email_tb.code%TYPE
    ) AS
        v_verify_code NUMBER;
    BEGIN
        SELECT
            abs(trunc(dbms_random.value(10000000, 99999999)))
        INTO v_verify_code
        FROM
            dual;

        INSERT INTO verify_email_tb (
            email,
            code,
            date_houre
        ) VALUES (
            p_email,
            v_verify_code,
            to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
        );

        p_code := v_verify_code;
    END send_code;

    PROCEDURE login (
        p_email      IN custmers.email%TYPE DEFAULT NULL,
        p_password   IN custmers.password%TYPE DEFAULT NULL,
        p_custmer_id OUT custmers.admin%TYPE,
        p_admin      OUT custmers.admin%TYPE,
        p_first_name OUT custmers.first_name%TYPE,
        p_last_name  OUT custmers.last_name%TYPE,
        p_image      OUT CLOB,
        p_out_code   OUT NUMBER
    ) AS
        v_count NUMBER := 0;
    BEGIN
        SELECT
            COUNT(email)
        INTO v_count
        FROM
            custmers
        WHERE
                email = p_email
            AND password = p_password;

        IF v_count > 0 THEN
            p_out_code := 1;
            SELECT
                custmer_id,
                first_name,
                last_name,
                admin,
                image
            INTO
                p_custmer_id,
                p_first_name,
                p_last_name,
                p_admin,
                p_image
            FROM
                custmers
            WHERE
                    email = p_email
                AND password = p_password;

        ELSE
            p_out_code := 3;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END login;

    PROCEDURE update_custmer (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_first_name IN custmers.first_name%TYPE DEFAULT NULL,
        p_last_name  IN custmers.last_name%TYPE DEFAULT NULL,
        p_password   IN custmers.password%TYPE DEFAULT NULL,
--        p_image      IN custmers.image%TYPE DEFAULT NULL,
        p_out_code   OUT NUMBER
    ) AS
    BEGIN
        UPDATE custmers
        SET
            first_name = p_first_name,
            last_name = p_last_name,
            password = p_password
--            ,
--            image = p_image
        WHERE
            custmer_id = p_custmer_id;

        IF SQL%rowcount = 0 THEN
            p_out_code := 3;
        ELSE
            p_out_code := 1;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END update_custmer;

END permission_pkg;

/
--------------------------------------------------------
--  DDL for Package Body USER_OPRATIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "BOOKSTORE"."USER_OPRATIONS_PKG" AS

    PROCEDURE get_all_books (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           book_id                              id,
                           title,
                           image,
                           price,
                           get_publisher_for_book(publisher_id) publisher,
                           get_auther_for_book(book_id)         authers,
                           path,
                           get_languge_for_book(language_id)       language
                           
                       FROM
                           books;

    END get_all_books;

    PROCEDURE get_book_by_id (
        p_book_id IN books.book_id%TYPE DEFAULT NULL,
        p_out     OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           book_id                                 id,
                           title,
                           num_pages,
                           to_char(publication_date, 'yyyy/mm/dd') publication_date,
                           get_auther_for_book(book_id)            authers,
                           get_publisher_for_book(publisher_id)    publisher,
                           get_languge_for_book(language_id)       language,
                           image,
                           price
                       FROM
                           books
                       WHERE
                           book_id = p_book_id;

    END get_book_by_id;

    PROCEDURE get_orders_by_custmer_id_done (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           order_id                                     id,
                           to_char(order_date, 'yyyy/mm/dd')            order_date2,
                           get_shipping_method_name(shipping_method_id) shipping_method,
                           get_dest_address(dest_address_id)            address,
                           get_total_cost(order_id, shipping_method_id) cost,
                           get_order_status(order_id)                   status,
                           get_order_last_date(order_id)                lastdate
                       FROM
                           cust_order
                       WHERE
                               customer_id = p_custmer_id
                           AND shipping_method_id IS NOT NULL
                       ORDER BY
                           order_date DESC;

    END get_orders_by_custmer_id_done;

    PROCEDURE get_orders_by_custmer_id_not (
        p_custmer_id IN custmers.custmer_id%TYPE DEFAULT NULL,
        p_out        OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           order_id                                     id,
                           to_char(order_date, 'yyyy/mm/dd')            order_date,
                           get_shipping_method_name(shipping_method_id) shipping_method,
                           get_dest_address(dest_address_id)            address,
                           get_total_cost(order_id, shipping_method_id) cost,
                           get_order_status(order_id)                   status,
                           get_order_last_date(order_id)                lastdate
                       FROM
                           cust_order
                       WHERE
                               customer_id = p_custmer_id
                           AND shipping_method_id IS NULL;

    END get_orders_by_custmer_id_not;

    PROCEDURE get_auther_and_books_number (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           a.auther_name     name,
                           COUNT(ba.book_id) count
                       FROM
                           book_auther ba,
                           authers     a
                       WHERE
                           ba.auther_id = a.auther_id
                       GROUP BY
                           a.auther_name;

    END get_auther_and_books_number;
    
    PROCEDURE get_publisher_and_books_number (
        p_out OUT SYS_REFCURSOR
    ) AS
    BEGIN
        OPEN p_out FOR SELECT
                           get_publisher_for_book(PUBLISHER_ID)     name,
                           COUNT(book_id) count
                       FROM
                           books
                       GROUP BY
                           PUBLISHER_ID;

    END get_publisher_and_books_number;

    PROCEDURE get_order_details (
        p_order_id IN cust_order.order_id%TYPE DEFAULT NULL,
        p_status   OUT NUMBER,
        p_out1     OUT SYS_REFCURSOR,
        p_out2     OUT SYS_REFCURSOR
    ) AS
        v_stat NUMBER default NULL;
    BEGIN
        SELECT
            shipping_method_id
        INTO v_stat
        FROM
            cust_order
        WHERE
            order_id = p_order_id;

        OPEN p_out1 FOR SELECT
                           order_id                                     id,
                           to_char(order_date, 'yyyy/mm/dd')            order_date,
                           get_shipping_method_name(shipping_method_id) shipping_method,
                           get_dest_address(dest_address_id)            address,
                           get_total_cost(order_id, shipping_method_id) cost,
                           get_order_status(order_id)                   status,
                           get_order_last_date(order_id)                lastdate,
                           get_method_cost(shipping_method_id)          shippingcost
                       FROM
                           cust_order
                       WHERE
                           order_id = p_order_id;

        IF v_stat IS NULL THEN
            p_status := 2;
        ELSE
            p_status := 1;
        END IF;

        OPEN p_out2 FOR SELECT
                           line_id                 id,
                           get_book_title(book_id) title,
                           price
                       FROM
                           order_line
                       WHERE
                           order_id = p_order_id;

    END get_order_details;

    PROCEDURE add_order (
        p_custmer_id IN cust_order.customer_id%TYPE DEFAULT NULL,
        p_order_id   OUT cust_order.order_id%TYPE,
        p_out_code   OUT NUMBER
    ) AS
    BEGIN
        INSERT INTO cust_order ( customer_id ) VALUES ( p_custmer_id ) RETURNING order_id INTO p_order_id;

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END add_order;

    PROCEDURE delete_order (
        p_order_id IN cust_order.order_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
    DELETE FROM order_line
WHERE
     order_id = p_order_id
;
        DELETE FROM cust_order
        WHERE
            order_id = p_order_id;

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_order;

    PROCEDURE delete_book_from_order (
        p_line_id  IN order_line.line_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
    BEGIN
        DELETE FROM order_line
        WHERE
            line_id = p_line_id;

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END delete_book_from_order;

    PROCEDURE add_book_to_order (
        p_order_id IN order_line.order_id%TYPE DEFAULT NULL,
        p_book_id  IN order_line.book_id%TYPE DEFAULT NULL,
        p_out_code OUT NUMBER
    ) AS
        v_price NUMBER;
    BEGIN
        SELECT
            price
        INTO v_price
        FROM
            books
        WHERE
            book_id = p_book_id;

        INSERT INTO order_line (
            order_id,
            book_id,
            price
        ) VALUES (
            p_order_id,
            p_book_id,
            v_price
        );

        p_out_code := 1;
    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END add_book_to_order;

    PROCEDURE save_order (
        p_order_id           IN cust_order.order_id%TYPE DEFAULT NULL,
        p_shipping_method_id IN cust_order.shipping_method_id%TYPE DEFAULT NULL,
        p_dest_address_id    IN cust_order.dest_address_id%TYPE DEFAULT NULL,
        p_out_code           OUT NUMBER
    ) AS
        v_custmer_id NUMBER;
        v_address    NUMBER default NULL;
        v_num_books  NUMBER;
    BEGIN
        SELECT
            COUNT(book_id)
        INTO v_num_books
        FROM
            order_line
        WHERE
            order_id = p_order_id;

        IF v_num_books > 0 THEN
            SELECT
                customer_id
            INTO v_custmer_id
            FROM
                cust_order
            WHERE
                order_id = p_order_id;

            UPDATE cust_order
            SET
                shipping_method_id = p_shipping_method_id,
                dest_address_id = p_dest_address_id,
                order_date = sysdate
            WHERE
                order_id = p_order_id;

            SELECT
                COUNT(address_id)
            INTO v_address
            FROM
                custmer_address
            WHERE
                    custmer_id = v_custmer_id
                AND address_id = p_dest_address_id;

            IF v_address = 0 THEN
                INSERT INTO custmer_address (
                    custmer_id,
                    address_id
                ) VALUES (
                    v_custmer_id,
                    p_dest_address_id
                );

            END IF;

            INSERT INTO order_history (
                order_id,
                status_id,
                status_date
            ) VALUES (
                p_order_id,
                1,
                sysdate
            );

            p_out_code := 1;
        ELSE
            p_out_code := 3;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            p_out_code := 2;
    END save_order;

    PROCEDURE shearch_book (
        p_title        IN books.title%TYPE DEFAULT NULL,
        p_language_id  IN books.language_id%TYPE DEFAULT NULL,
        p_publisher_id IN books.publisher_id%TYPE DEFAULT NULL,
        p_auther_id    IN authers.auther_id%TYPE DEFAULT NULL,
        p_count        OUT NUMBER,
        p_out          OUT SYS_REFCURSOR
    ) AS

        v_stm   VARCHAR2(2000);
        v_where VARCHAR2(2000);
        v_lang  NUMBER;
        v_publ  NUMBER;
        v_auth  NUMBER;
    BEGIN
        IF p_language_id = 0 THEN
            v_lang := NULL;
        ELSE
            v_lang := p_language_id;
        END IF;

        IF p_publisher_id = 0 THEN
            v_publ := NULL;
        ELSE
            v_publ := p_publisher_id;
        END IF;

        IF p_auther_id = 0 THEN
            v_auth := NULL;
        ELSE
            v_auth := p_auther_id;
        END IF;

        v_stm := 'SELECT
                           book_id                              id,
                           title,
                           image,
                           price,
                           get_publisher_for_book(publisher_id) publisher,
                           get_auther_for_book(book_id)         authers
                       FROM
                           books
                       WHERE
                           1 = 1
    ';
        IF p_title IS NOT NULL THEN
            v_where := v_where
                       || '  and title like ''%'
                       || p_title
                       || '%''';
        END IF;

        IF v_lang IS NOT NULL THEN
            v_where := v_where
                       || '  and language_id = '
                       || v_lang;
        END IF;

        IF v_publ IS NOT NULL THEN
            v_where := v_where
                       || '  and publisher_id ='
                       || v_publ;
        END IF;

        IF v_auth IS NOT NULL THEN
            v_where := v_where
                       || '  and book_id in (select book_id from BOOK_AUTHER where AUTHER_ID = '
                       || v_auth
                       || ')';
        END IF;

        dbms_output.put_line(v_stm
                             || ' '
                             || v_where);
        OPEN p_out FOR v_stm
                       || ' '
                       || v_where;

        EXECUTE IMMEDIATE 'select count(book_id) from books where 1 = 1' || v_where
        INTO p_count;
    END shearch_book;

END user_oprations_pkg;

/
--------------------------------------------------------
--  DDL for Function BASE64ENCODE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."BASE64ENCODE" (
    p_blob IN BLOB
) RETURN CLOB AS
    l_clob CLOB;
    l_step PLS_INTEGER := 23808; -- make sure you set a multiple of 3 not higher than 24573
BEGIN
    FOR i IN 0..trunc((dbms_lob.getlength(p_blob) - 1) / l_step) LOOP
        l_clob := l_clob
                  || utl_raw.cast_to_varchar2(utl_encode.base64_encode(dbms_lob.substr(p_blob, l_step, i * l_step + 1)));
    END LOOP;

    RETURN l_clob;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
END base64encode;

/
--------------------------------------------------------
--  DDL for Function GET_ADDRESS_STATUS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_ADDRESS_STATUS" (
    p_status_id IN address_status.status_id%TYPE
) RETURN VARCHAR2 AS
    v_status VARCHAR2(50);
BEGIN
    SELECT
        ADDRESS_STATUS
    INTO v_status
    FROM
        address_status
    WHERE
        status_id = p_status_id;

    RETURN v_status;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_AUTHER_FOR_BOOK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_AUTHER_FOR_BOOK" (
    p_book_id IN books.book_id%TYPE
) RETURN VARCHAR2 AS
    v_name VARCHAR2(500);
BEGIN
    SELECT
        LISTAGG(auther_name, ',') WITHIN GROUP(
        ORDER BY
            auther_name
        )
    INTO v_name
    FROM
        authers
    WHERE
        auther_id IN (
            SELECT
                auther_id
            FROM
                book_auther
            WHERE
                book_id = p_book_id
        );

    RETURN v_name;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_AUTHER_ID_FOR_BOOK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_AUTHER_ID_FOR_BOOK" (P_BOOK_ID IN books.book_id%TYPE)RETURN NUMBER
AS
V_ID NUMBER;
BEGIN
SELECT AUTHER_ID INTO V_ID FROM BOOK_AUTHER WHERE BOOK_ID = P_BOOK_ID;
RETURN V_ID;
EXCEPTION WHEN OTHERS THEN
RETURN 0;



END ;

/
--------------------------------------------------------
--  DDL for Function GET_BOOK_TITLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_BOOK_TITLE" (
    p_book_id IN books.book_id%TYPE
) RETURN VARCHAR2 AS
    v_title VARCHAR2(50);
BEGIN
    SELECT
        title
    INTO v_title
    FROM
        books
    WHERE
        book_id = p_book_id;

    RETURN v_title;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_CUNTRY_NAME
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_CUNTRY_NAME" (
    p_country_id IN country.country_id%TYPE
) RETURN VARCHAR2 AS
    v_name VARCHAR2(500);
BEGIN
    SELECT
        COUNTRY_NAME
    INTO v_name
    FROM
        country
    WHERE
        country_id = p_country_id;

    RETURN v_name;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_DEST_ADDRESS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_DEST_ADDRESS" (
    p_ADDRESS_ID IN address.ADDRESS_ID%TYPE
) RETURN VARCHAR2 AS
    v_name VARCHAR2(500);
BEGIN
    SELECT
        get_cuntry_name(COUNTRY_ID)||'/' || city ||'/' ||street_name
    INTO v_name
    FROM
        ADDRESS
    WHERE
        ADDRESS_ID = p_ADDRESS_ID;

    RETURN v_name;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_LANGUGE_FOR_BOOK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_LANGUGE_FOR_BOOK" (
    p_language_id IN book_languages.language_id%TYPE
) RETURN VARCHAR2 AS
    v_name VARCHAR2(500);
BEGIN
    SELECT
        language_name
    INTO v_name
    FROM
        book_languages
    WHERE
        language_id = p_language_id;

    RETURN v_name;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_METHOD_COST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_METHOD_COST" (
    p_method_id IN shipping_method.method_id%TYPE
) RETURN number AS
    v_cost number;
BEGIN
    SELECT
        cost
    INTO v_cost
    FROM
        shipping_method
    WHERE
        method_id = p_method_id;

    RETURN v_cost;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END;

/
--------------------------------------------------------
--  DDL for Function GET_ORDER_LAST_DATE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_ORDER_LAST_DATE" (
    p_order_id IN cust_order.order_id%TYPE
) RETURN VARCHAR2 AS
    v_date varchar2(50);
BEGIN
    SELECT
        to_char(status_date, 'yyyy/mm/dd hh:mi')
    INTO v_date
    FROM
        order_history
    WHERE
            order_id = p_order_id
        AND to_char(status_date, 'yyyy/mm/dd hh:mi:ss') = (
            SELECT
                to_char(MAX(status_date), 'yyyy/mm/dd hh:mi:ss')
            FROM
                order_history
            WHERE
                order_id = p_order_id
        );

    RETURN v_date;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_ORDER_STATUS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_ORDER_STATUS" (
    p_order_id IN cust_order.order_id%TYPE
) RETURN varchar2 AS
    v_status varchar2(50);
BEGIN
    SELECT
        get_status_name(status_id)
    INTO v_status
    FROM
        order_history
    WHERE
            order_id = p_order_id
        AND to_char(status_date, 'yyyy/mm/dd hh:mi:ss') = (
            SELECT
                to_char(MAX(status_date), 'yyyy/mm/dd hh:mi:ss')
            FROM
                order_history
            WHERE
                order_id = p_order_id
        );

    RETURN v_status;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_ORDER_STATUS_NUM
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_ORDER_STATUS_NUM" (
    p_order_id IN cust_order.order_id%TYPE
) RETURN number AS
    v_status number;
BEGIN
    SELECT
        status_id
    INTO v_status
    FROM
        order_history
    WHERE
            order_id = p_order_id
        AND to_char(status_date, 'yyyy/mm/dd hh:mi:ss') = (
            SELECT
                to_char(MAX(status_date), 'yyyy/mm/dd hh:mi:ss')
            FROM
                order_history
            WHERE
                order_id = p_order_id
        );

    RETURN v_status;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_PUBLISHER_FOR_BOOK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_PUBLISHER_FOR_BOOK" (
    p_publisher_id IN publishers.publisher_id%TYPE
) RETURN VARCHAR2 AS
    v_name VARCHAR2(500);
BEGIN
    SELECT
        publisher_name
    INTO v_name
    FROM
        publishers
    WHERE
        publisher_id = p_publisher_id;

    RETURN v_name;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_SHIPPING_METHOD_NAME
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_SHIPPING_METHOD_NAME" (
    p_method_id IN shipping_method.method_id%TYPE
) RETURN VARCHAR2 AS
    v_name VARCHAR2(500);
BEGIN
    SELECT
        METHOD_NAME
    INTO v_name
    FROM
        shipping_method
    WHERE
        method_id = p_method_id;

    RETURN v_name;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_STATUS_NAME
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_STATUS_NAME" (
    p_status_id IN order_status.status_id%TYPE
) RETURN VARCHAR2 AS
    v_status VARCHAR2(50);
BEGIN
    SELECT
        status_value
    INTO v_status
    FROM
        order_status
    WHERE
        status_id = p_status_id;

    RETURN v_status;
EXCEPTION
    WHEN OTHERS THEN
        RETURN ' ';
END;

/
--------------------------------------------------------
--  DDL for Function GET_TOTAL_COST
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."GET_TOTAL_COST" (
    p_order_id  IN cust_order.order_id%TYPE,
    p_method_id IN shipping_method.method_id%TYPE
) RETURN NUMBER AS
    v_cost_books  NUMBER;
    v_cost_method NUMBER;
    v_sum         NUMBER;
BEGIN
    SELECT
        SUM(price)
    INTO v_cost_books
    FROM
        order_line
    WHERE
        order_id = p_order_id;

    SELECT
        cost
    INTO v_cost_method
    FROM
        shipping_method
    WHERE
        method_id = p_method_id;

    v_sum := v_cost_books + v_cost_method;
    RETURN v_sum;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END;

/
--------------------------------------------------------
--  DDL for Function MD5
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "BOOKSTORE"."MD5" (
        str IN VARCHAR
    ) RETURN VARCHAR2 AS
        v_checksum VARCHAR2(32);
    BEGIN
        v_checksum := lower(rawtohex(utl_raw.cast_to_raw(sys.dbms_obfuscation_toolkit.md5(input_string => str))));

        RETURN v_checksum;
    EXCEPTION
        WHEN no_data_found THEN
            NULL;
        WHEN OTHERS THEN

            -- Consider logging the error and then re-raise
            RAISE;
    END md5;

/
--------------------------------------------------------
--  Constraints for Table CUSTMER_ADDRESS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."CUSTMER_ADDRESS" MODIFY ("CUSTMER_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."CUSTMER_ADDRESS" MODIFY ("ADDRESS_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."CUSTMER_ADDRESS" ADD CONSTRAINT "CUSTMER_ADDRESS_PK" PRIMARY KEY ("CUSTMER_ID", "ADDRESS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDER_STATUS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ORDER_STATUS" MODIFY ("STATUS_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."ORDER_STATUS" ADD CONSTRAINT "TABLE1_PK" PRIMARY KEY ("STATUS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BOOK_AUTHER
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."BOOK_AUTHER" MODIFY ("BOOK_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."BOOK_AUTHER" MODIFY ("AUTHER_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."BOOK_AUTHER" ADD CONSTRAINT "BOOK_AUTHER_PK" PRIMARY KEY ("BOOK_ID", "AUTHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDER_HISTORY
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ORDER_HISTORY" MODIFY ("HISTORY_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."ORDER_HISTORY" ADD CONSTRAINT "ORDER_HISTORY_PK" PRIMARY KEY ("HISTORY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BOOK_LANGUAGES
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."BOOK_LANGUAGES" MODIFY ("LANGUAGE_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."BOOK_LANGUAGES" ADD CONSTRAINT "BOOK_LANGUAGES_PK" PRIMARY KEY ("LANGUAGE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ADDRESS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ADDRESS" MODIFY ("ADDRESS_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."ADDRESS" ADD CONSTRAINT "ADDRESS_PK" PRIMARY KEY ("ADDRESS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COUNTRY
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."COUNTRY" MODIFY ("COUNTRY_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."COUNTRY" ADD CONSTRAINT "COUNTRY_PK" PRIMARY KEY ("COUNTRY_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SHIPPING_METHOD
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."SHIPPING_METHOD" MODIFY ("METHOD_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."SHIPPING_METHOD" ADD CONSTRAINT "SHIPPING_METHOD_PK" PRIMARY KEY ("METHOD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUTHERS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."AUTHERS" MODIFY ("AUTHER_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."AUTHERS" ADD CONSTRAINT "AUTHERS_PK" PRIMARY KEY ("AUTHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CUST_ORDER
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."CUST_ORDER" MODIFY ("ORDER_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."CUST_ORDER" ADD CONSTRAINT "CUST_ORDER_PK" PRIMARY KEY ("ORDER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BOOKS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."BOOKS" MODIFY ("BOOK_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."BOOKS" ADD CONSTRAINT "BOOKS_PK" PRIMARY KEY ("BOOK_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ADDRESS_STATUS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ADDRESS_STATUS" MODIFY ("STATUS_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."ADDRESS_STATUS" ADD CONSTRAINT "ADDRESS_STATUS_PK" PRIMARY KEY ("STATUS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PUBLISHERS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."PUBLISHERS" MODIFY ("PUBLISHER_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."PUBLISHERS" ADD CONSTRAINT "PUBLISHERS_PK" PRIMARY KEY ("PUBLISHER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CUSTMERS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."CUSTMERS" MODIFY ("CUSTMER_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."CUSTMERS" ADD CONSTRAINT "CUSTMERS_PK" PRIMARY KEY ("CUSTMER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "BOOKSTORE"."CUSTMERS" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."CUSTMERS" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."CUSTMERS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."CUSTMERS" MODIFY ("PASSWORD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ORDER_LINE
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ORDER_LINE" MODIFY ("LINE_ID" NOT NULL ENABLE);
  ALTER TABLE "BOOKSTORE"."ORDER_LINE" ADD CONSTRAINT "ORDER_LINE_PK" PRIMARY KEY ("LINE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ADDRESS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ADDRESS" ADD CONSTRAINT "ADDRESS_FK1" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES "BOOKSTORE"."COUNTRY" ("COUNTRY_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOKS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."BOOKS" ADD CONSTRAINT "BOOKS_FK1" FOREIGN KEY ("LANGUAGE_ID")
	  REFERENCES "BOOKSTORE"."BOOK_LANGUAGES" ("LANGUAGE_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."BOOKS" ADD CONSTRAINT "BOOKS_FK2" FOREIGN KEY ("PUBLISHER_ID")
	  REFERENCES "BOOKSTORE"."PUBLISHERS" ("PUBLISHER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOK_AUTHER
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."BOOK_AUTHER" ADD CONSTRAINT "BOOK_AUTHER_FK1" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "BOOKSTORE"."BOOKS" ("BOOK_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."BOOK_AUTHER" ADD CONSTRAINT "BOOK_AUTHER_FK2" FOREIGN KEY ("AUTHER_ID")
	  REFERENCES "BOOKSTORE"."AUTHERS" ("AUTHER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CUSTMER_ADDRESS
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."CUSTMER_ADDRESS" ADD CONSTRAINT "CUSTMER_ADDRESS_FK1" FOREIGN KEY ("CUSTMER_ID")
	  REFERENCES "BOOKSTORE"."CUSTMERS" ("CUSTMER_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."CUSTMER_ADDRESS" ADD CONSTRAINT "CUSTMER_ADDRESS_FK2" FOREIGN KEY ("ADDRESS_ID")
	  REFERENCES "BOOKSTORE"."ADDRESS" ("ADDRESS_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."CUSTMER_ADDRESS" ADD CONSTRAINT "CUSTMER_ADDRESS_FK3" FOREIGN KEY ("STATUS_ID")
	  REFERENCES "BOOKSTORE"."ADDRESS_STATUS" ("STATUS_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CUST_ORDER
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."CUST_ORDER" ADD CONSTRAINT "CUST_ORDER_FK1" FOREIGN KEY ("CUSTOMER_ID")
	  REFERENCES "BOOKSTORE"."CUSTMERS" ("CUSTMER_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."CUST_ORDER" ADD CONSTRAINT "CUST_ORDER_FK2" FOREIGN KEY ("SHIPPING_METHOD_ID")
	  REFERENCES "BOOKSTORE"."SHIPPING_METHOD" ("METHOD_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."CUST_ORDER" ADD CONSTRAINT "CUST_ORDER_FK3" FOREIGN KEY ("DEST_ADDRESS_ID")
	  REFERENCES "BOOKSTORE"."ADDRESS" ("ADDRESS_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDER_HISTORY
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ORDER_HISTORY" ADD CONSTRAINT "ORDER_HISTORY_FK1" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "BOOKSTORE"."CUST_ORDER" ("ORDER_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."ORDER_HISTORY" ADD CONSTRAINT "ORDER_HISTORY_FK2" FOREIGN KEY ("STATUS_ID")
	  REFERENCES "BOOKSTORE"."ORDER_STATUS" ("STATUS_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDER_LINE
--------------------------------------------------------

  ALTER TABLE "BOOKSTORE"."ORDER_LINE" ADD CONSTRAINT "ORDER_LINE_FK1" FOREIGN KEY ("ORDER_ID")
	  REFERENCES "BOOKSTORE"."CUST_ORDER" ("ORDER_ID") ENABLE;
  ALTER TABLE "BOOKSTORE"."ORDER_LINE" ADD CONSTRAINT "ORDER_LINE_FK2" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "BOOKSTORE"."BOOKS" ("BOOK_ID") ENABLE;
